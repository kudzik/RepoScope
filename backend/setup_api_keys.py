#!/usr/bin/env python3
"""
Setup script for configuring API keys for RepoScope.
Helps users configure OpenAI, OpenRouter, and GitHub API keys.
"""

import os
import sys
from pathlib import Path


def print_header():
    """Print setup header."""
    print("=" * 60)
    print("üöÄ RepoScope API Keys Setup")
    print("=" * 60)
    print()


def print_section(title: str):
    """Print section header."""
    print(f"\nüìã {title}")
    print("-" * 40)


def get_user_input(prompt: str, default: str = "", required: bool = True) -> str:
    """Get user input with validation."""
    while True:
        if default:
            user_input = input(f"{prompt} [{default}]: ").strip()
            if not user_input:
                user_input = default
        else:
            user_input = input(f"{prompt}: ").strip()

        if user_input or not required:
            return user_input

        print("‚ùå This field is required. Please enter a value.")


def validate_openai_key(key: str) -> bool:
    """Validate OpenAI API key format."""
    return key.startswith("sk-") and len(key) > 20


def validate_github_token(token: str) -> bool:
    """Validate GitHub token format."""
    return token.startswith(("ghp_", "github_pat_")) and len(token) > 20


def setup_openai():
    """Setup OpenAI API configuration."""
    print_section("OpenAI API Configuration")
    print("üîó Get your API key from: https://platform.openai.com/api-keys")
    print("üí∞ Cost: ~$0.002 per 1K tokens (GPT-3.5-turbo)")
    print()

    api_key = get_user_input("Enter your OpenAI API key", required=False)

    if api_key:
        if not validate_openai_key(api_key):
            print("‚ö†Ô∏è  Warning: API key format looks incorrect (should start with 'sk-')")

        model = get_user_input("OpenAI model", "gpt-3.5-turbo", required=False)
        return api_key, model

    print("‚è≠Ô∏è  Skipping OpenAI configuration")
    return "", "gpt-3.5-turbo"


def setup_openrouter():
    """Setup OpenRouter API configuration."""
    print_section("OpenRouter API Configuration (Alternative)")
    print("üîó Get your API key from: https://openrouter.ai/keys")
    print("üí∞ Cost: Often cheaper than OpenAI, supports many models")
    print("üìù Use this if you don't have OpenAI API key")
    print()

    api_key = get_user_input("Enter your OpenRouter API key", required=False)

    if api_key:
        if not api_key.startswith("sk-or-"):
            print("‚ö†Ô∏è  Warning: OpenRouter keys usually start with 'sk-or-'")

        model = get_user_input("OpenRouter model", "openai/gpt-3.5-turbo", required=False)
        use_openrouter = get_user_input("Use OpenRouter as primary? (y/n)", "n", required=False)
        return api_key, model, use_openrouter.lower() in ["y", "yes", "true"]

    print("‚è≠Ô∏è  Skipping OpenRouter configuration")
    return "", "openai/gpt-3.5-turbo", False


def setup_github():
    """Setup GitHub API configuration."""
    print_section("GitHub API Configuration (Optional)")
    print("üîó Create token at: https://github.com/settings/tokens")
    print("üìù Permissions needed: public_repo (read)")
    print("‚ö° Increases rate limit from 60 to 5000 requests/hour")
    print()

    token = get_user_input("Enter your GitHub Personal Access Token", required=False)

    if token:
        if not validate_github_token(token):
            print("‚ö†Ô∏è  Warning: GitHub tokens usually start with 'ghp_' or 'github_pat_'")
        return token

    print("‚è≠Ô∏è  Skipping GitHub configuration (will use anonymous access)")
    return ""


def generate_secret_key() -> str:
    """Generate a secure secret key."""
    import secrets

    return secrets.token_urlsafe(32)


def update_env_file(config: dict):
    """Update .env file with new configuration."""
    env_path = Path(__file__).parent / ".env"

    # Read existing .env file
    env_content = {}
    if env_path.exists():
        with open(env_path, "r") as f:
            for line in f:
                line = line.strip()
                if line and not line.startswith("#") and "=" in line:
                    key, value = line.split("=", 1)
                    env_content[key] = value

    # Update with new values
    env_content.update(config)

    # Write back to .env file
    with open(env_path, "w") as f:
        f.write("# RepoScope Backend Environment Variables\n")
        f.write("# Generated by setup_api_keys.py\n\n")

        # OpenAI Configuration
        f.write("# OpenAI API Configuration\n")
        f.write(f"OPENAI_API_KEY={env_content.get('OPENAI_API_KEY', '')}\n")
        f.write(f"OPENAI_MODEL={env_content.get('OPENAI_MODEL', 'gpt-3.5-turbo')}\n\n")

        # OpenRouter Configuration
        f.write("# OpenRouter API Configuration\n")
        f.write(f"OPENROUTER_API_KEY={env_content.get('OPENROUTER_API_KEY', '')}\n")
        f.write(
            f"OPENROUTER_MODEL={env_content.get('OPENROUTER_MODEL', 'openai/gpt-3.5-turbo')}\n\n"
        )

        # GitHub Configuration
        f.write("# GitHub API Configuration\n")
        f.write(f"GITHUB_TOKEN={env_content.get('GITHUB_TOKEN', '')}\n\n")

        # Database Configuration
        f.write("# Database Configuration\n")
        f.write(f"DATABASE_URL={env_content.get('DATABASE_URL', 'sqlite:///./reposcope.db')}\n\n")

        # Security
        f.write("# Security\n")
        f.write(f"SECRET_KEY={env_content.get('SECRET_KEY', generate_secret_key())}\n")
        f.write(f"ALGORITHM={env_content.get('ALGORITHM', 'HS256')}\n")
        f.write(
            f"ACCESS_TOKEN_EXPIRE_MINUTES={env_content.get('ACCESS_TOKEN_EXPIRE_MINUTES', '30')}\n\n"
        )

        # Application Settings
        f.write("# Application Settings\n")
        f.write(f"DEBUG={env_content.get('DEBUG', 'true')}\n")
        f.write(f"LOG_LEVEL={env_content.get('LOG_LEVEL', 'info')}\n")
        f.write(
            f"CORS_ORIGINS={env_content.get('CORS_ORIGINS', 'http://localhost:3000,http://127.0.0.1:3000')}\n\n"
        )

        # LLM Cost Optimization
        f.write("# LLM Cost Optimization\n")
        f.write(f"USE_OPENROUTER={env_content.get('USE_OPENROUTER', 'false')}\n")
        f.write(f"ENABLE_CACHING={env_content.get('ENABLE_CACHING', 'true')}\n")
        f.write(f"MAX_TOKENS={env_content.get('MAX_TOKENS', '2000')}\n")


def test_configuration():
    """Test the API configuration."""
    print_section("Testing Configuration")

    try:
        from config.settings import settings

        # Test OpenAI
        if settings.openai_api_key and settings.openai_api_key != "sk-your-openai-api-key-here":
            print("‚úÖ OpenAI API key configured")
        else:
            print("‚ö†Ô∏è  OpenAI API key not configured")

        # Test OpenRouter
        if (
            settings.openrouter_api_key
            and settings.openrouter_api_key != "sk-or-your-openrouter-key-here"
        ):
            print("‚úÖ OpenRouter API key configured")
        else:
            print("‚ö†Ô∏è  OpenRouter API key not configured")

        # Test GitHub
        if settings.github_token and settings.github_token != "ghp_your-github-token-here":
            print("‚úÖ GitHub token configured")
        else:
            print("‚ö†Ô∏è  GitHub token not configured (optional)")

        # Check if at least one LLM provider is configured
        has_llm = (
            settings.openai_api_key and settings.openai_api_key != "sk-your-openai-api-key-here"
        ) or (
            settings.openrouter_api_key
            and settings.openrouter_api_key != "sk-or-your-openrouter-key-here"
        )

        if has_llm:
            print("\nüéâ Configuration looks good! You can now test the application.")
        else:
            print("\n‚ùå No LLM provider configured. You need either OpenAI or OpenRouter API key.")

    except Exception as e:
        print(f"‚ùå Error testing configuration: {e}")


def main():
    """Main setup function."""
    print_header()

    print("This script will help you configure API keys for RepoScope.")
    print("You need at least one LLM provider (OpenAI or OpenRouter) to use the application.")
    print()

    # Setup APIs
    openai_key, openai_model = setup_openai()
    openrouter_key, openrouter_model, use_openrouter = setup_openrouter()
    github_token = setup_github()

    # Validate configuration
    if not openai_key and not openrouter_key:
        print("\n‚ùå Error: You need to configure at least one LLM provider!")
        print("Please run the script again and provide either OpenAI or OpenRouter API key.")
        sys.exit(1)

    # Prepare configuration
    config = {
        "OPENAI_API_KEY": openai_key,
        "OPENAI_MODEL": openai_model,
        "OPENROUTER_API_KEY": openrouter_key,
        "OPENROUTER_MODEL": openrouter_model,
        "GITHUB_TOKEN": github_token,
        "USE_OPENROUTER": str(use_openrouter).lower(),
    }

    # Update .env file
    print_section("Saving Configuration")
    update_env_file(config)
    print("‚úÖ Configuration saved to .env file")

    # Test configuration
    test_configuration()

    print("\n" + "=" * 60)
    print("üéâ Setup complete!")
    print("=" * 60)
    print("\nNext steps:")
    print("1. Start the backend: python main.py")
    print("2. Start the frontend: cd ../frontend && npm run dev")
    print("3. Open http://localhost:3000 and test repository analysis")
    print()


if __name__ == "__main__":
    main()
